#-------------------------------------------------------------------------------
# Name:        code
# Purpose:
# memo:      鈴木太郎さんのコードを基にしている。
#
# Author:      morishita
#
# Created:     02/03/2014
# Copyright:   (c) morishita 2014
# Licence:     GPLv2
#-------------------------------------------------------------------------------

def generate_L1CA(prn):
    LEN_L1CA = 1023
    delay = [ #/* G2 delay (chips) */
          5,   6,   7,   8,  17,  18, 139, 140, 141, 251,   #/*   1- 10 */
        252, 254, 255, 256, 257, 258, 469, 470, 471, 472,   #/*  11- 20 */
        473, 474, 509, 512, 513, 514, 515, 516, 859, 860,   #/*  21- 30 */
        861, 862, 863, 950, 947, 948, 950,  67, 103,  91,   #/*  31- 40 */
         19, 679, 225, 625, 946, 638, 161,1001, 554, 280,   #/*  41- 50 */
        710, 709, 775, 864, 558, 220, 397,  55, 898, 759,   #/*  51- 60 */
        367, 299,1018, 729, 695, 780, 801, 788, 732,  34,   #/*  61- 70 */
        320, 327, 389, 407, 525, 405, 221, 761, 260, 326,   #/*  71- 80 */
        955, 653, 699, 422, 188, 438, 959, 539, 879, 677,   #/*  81- 90 */
        586, 153, 792, 814, 446, 264,1015, 278, 536, 819,   #/*  91-100 */
        156, 957, 159, 712, 885, 461, 248, 713, 126, 807,   #/* 101-110 */
        279, 122, 197, 693, 632, 771, 467, 647, 203, 145,   #/* 111-120 */
        175,  52,  21, 237, 235, 886, 657, 634, 762, 355,   #/* 121-130 */
       1012, 176, 603, 130, 359, 595,  68, 386, 797, 456,   #/* 131-140 */
        499, 883, 307, 127, 211, 121, 118, 163, 628, 853,   #/* 141-150 */
        484, 289, 811, 202,1021, 463, 568, 904, 670, 230,   #/* 151-160 */
        911, 684, 309, 644, 932,  12, 314, 891, 212, 185,   #/* 161-170 */
        675, 503, 150, 395, 345, 846, 798, 992, 357, 995,   #/* 171-180 */
        877, 112, 144, 476, 193, 109, 445, 291,  87, 399,   #/* 181-190 */
        292, 901, 339, 208, 711, 189, 263, 537, 663, 942,   #/* 191-200 */
        173, 900,  30, 500, 935, 556, 373,  85, 652, 310    #/* 201-210 */
    ]
    code = [0] * LEN_L1CA
    G1 = [0] * LEN_L1CA
    G2 = [0] * LEN_L1CA
    R1 = [-1] * 10
    R2 = [-1] * 10
    for i in range(LEN_L1CA):
        G1[i] = R1[9]
        G2[i] = R2[9]
        C1 = R1[2] * R1[9]
        C2 = R2[1] * R2[2] * R2[5] * R2[7] * R2[8] * R2[9]
        R1.insert(0, C1)
        R2.insert(0, C2)
        R1.pop()
        R2.pop()
    j = LEN_L1CA - delay[prn - 1]
    for i in range(LEN_L1CA):
        code[i] = -G1[i] * G2[j % LEN_L1CA]
        j += 1
    return code

def main():
    l1ca = generate_L1CA(1)
    #print(l1ca)
    slide_l1ca = l1ca[:]                # 1次元配列（ただのリスト）なら、ディープコピーとなる
    # 1 つずつずらしながら相関をとる
    for j in range(len(l1ca)):
        last = slide_l1ca[-1]
        slide_l1ca.insert(0, last)
        slide_l1ca.pop()
        #print(slide_l1ca)
        sum = 0
        for i in range(len(l1ca)):
            sum += l1ca[i] * slide_l1ca[i]
        print(sum)
    ca_code = []
    for prn in range(32):
        ca_code.append(generate_L1CA(prn))
    corr_result = {}
    for prn_i in range(32):
        for prn_j in range(32):
            if prn_i == prn_j:
                continue

if __name__ == '__main__':
    main()
